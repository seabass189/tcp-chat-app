import java.io.*;
import java.net.*;
import java.text.*;
import java.util.Date;

/**
 * This class represents an instance of a client. The user primarily interacts with this class
 * and by doing so can send and receive the messages of other users.
 * @author Connor 
 *
 */
public class Client implements Runnable
{
	/*
	 * This field contains a BufferedReader that will accept the user's input
	 */
	private BufferedReader in;
	
	/*
	 * This field contains a ObjectOutputStream that will send Messages to the server
	 */
	private ObjectOutputStream toServer;
	
	/*
	 * This field contains a ObjectInputStream that will accept messages from the server
	 */
	private ObjectInputStream fromServer;
	
	/*
	 * This field contains a User object that represents the client
	 */
	private User self;
	
	/*
	 * This field contains a Message object to represent the messages to and from the server
	 */
	private Message message;
	
	/*
	 * This field contains an array of objects that represent the data held in incoming 
	 * Messages
	 */
	private Object[] details;
	
	/*
	 * This field contains a boolean that signifies whether the program should continue or end
	 */
	private boolean stop;
	
	private String chat;
	
	public Client()
	{
		//Instantiates the reader for user input
		in = new BufferedReader(new InputStreamReader(System.in));
		
		//Prompts the user for host's name and port number to create a socket
		System.out.print("Enter host to connect to: ");
		String host = in.readLine();
		System.out.print("Enter port to connect to: ");
		int port = Integer.parseInt(in.readLine());
		InetAddress address = InetAddress.getByName(host);
		Socket clientSocket = new Socket(address, port);
		
		//Input and output streams are instantiated using the generated socket
		toServer = new ObjectOutputStream(clientSocket.getOutputStream());
		fromServer = new ObjectInputStream(clientSocket.getInputStream());
		
		//Prompts the user for a username and creates a temporary User object
		System.out.print("Enter username: ");
		String username = in.readLine();
		self = new User(username);
		
		//The User object is used to send a connection request Message to the server
		message = new Message(MessageType.CONNECTION_REQUEST_MESSAGE, self, username, null);
		toServer.write(message);
		
		//Upon acknowledgement the client extracts the data held in the message
		message = (Message)fromServer.read();
		details = message.getMessageDetails();
		
		//The client's User object is updated to match the User held in the server
		self = details[1];
		
		//The arraylist of UserHandlers is extracted and the client iterates through the list
		//to inform the user of the other users currently present
		ArrayList<UserHandler> otherUsers = details[0];
		for(int i = 0; i<otherUsers.size(); i++)
		{
			System.out.println(otherUsers.get(i).getUser().getUsername()+" is in the room");
		}
		
		//The boolean stop remains false until the program is ended
		stop = false;
		
		//Two threads are generated with the user thread designed to listen for user input
		//while the server thread waits for messages from the server
		Thread user = new Thread(this, "user");
		Thread server = new Thread(this, "server");
		
		//The threads continue listening for input until the variable stop is changed
		//and ends the while loop
		while(!stop)
		{
			user.start();
			server.start();
		}
	}
	
	public void run()
	{
		try
		{
			//The user thread
			if(Thread.currentThread().getName().contentEquals("user"))
			{
				//Reads the user's input
				String text = in.readLine();
				
				//If the input is not the string "." then the client sends a message
				if(!text.contentEquals("."))
				{
					//Formats the message before sending
					DateFormat format = new SimpleDateFormat("HH:mm");
					Date date = new Date();
					String timestamp = self.getUsername()+" "+format.format(date)+": ";
					timestamp.concat(text);
					
					//Creates a new instance of the Message objects and sends it to the server
					message = new Message(MessageType.CHAT_MESSAGE, self, timestamp, null);
					toServer.write(message);
				}
				
				//If the input is the string "." then the client goes through termination
				//procedures
				else
				{
					//Creates a disconnect request message and sends to server
					message = new Message(MessageType.DISCONNECT_REQUEST_MESSAGE, self, null, null);
					toServer.write(message);
					
					//Upon receiving a message and verifying the disconnect acknowledgement
					//sets the variable stop to true and thus ends the while loop
					message = (Message)fromServer.read();
					if(message.getType().equals(MessageType.DISCONNECT_ACKNOWLEDGEMENT_MESSAGE))
						stop = true;
				}
			}
			
			//The server thread
			else if(Thread.currentThread().getName().contentEquals("server"))
			{
				//Client captures the message received from the server and its data
				message = (Message)fromServer.read();
				details = message.getMessageDetails();
				
				//If the message's type is User Status Change
				if(message.getType().equals(MessageType.USER_STATUS_CHANGE_MESSAGE))
				{
					//Obtains the User object held in the message
					//If true then the client tells the user that another person has joined
					//If false then the client tells the user a person has left
					User temp = details[0];
					if(details[1]=true)
					{
						System.out.println(temp.getUsername()+" has joined the room");
					}
					else
					{
						System.out.println(temp.getUsername()+" has left the room");
					}
				}
				
				//If the message's type is Chat 
				else if(message.getType().equals(MessageType.CHAT_MESSAGE))
				{
					//Prints out the message held in the Message object
					System.out.println(message.getMessageText());
				}
			}
		}
		catch(Exception e)
		{
			
		}
	}
}
